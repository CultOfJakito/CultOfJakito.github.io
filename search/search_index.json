{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Here you will learn how to mod Ultrakill</p> <p></p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you want to contribute to this wiki, head over to the repository and read the README</p>"},{"location":"getting-started/1-prerequisites/","title":"Prerequisites","text":"<p>To get started you're gonna need a few things:  </p> <ul> <li>ULTRAKILL (obviously).</li> <li>Some C# and/or Unity knowledge.</li> <li>Any C# IDE, but for this we recommend Visual Studio.</li> <li>BepInEx already set up.</li> </ul>"},{"location":"getting-started/2-starting/","title":"Setup","text":""},{"location":"getting-started/2-starting/#project-creation","title":"Project Creation","text":"<p>There are two types of mods for ULTRAKILL - BepInEx and UMM.  </p> <p>BepInEx is easier to set up, but UMM supports unloading and reloading, as well as some useful functions like custom keybinds. We'll be using BepInEx, but it's easy to convert it later.</p> <p>First, open the Command Prompt, and enter the directory in which you want the project to be made.  <pre><code>cd C:\\Path\\To\\Your\\Folder\n</code></pre></p> <p>Then, run this to create the project. <pre><code>dotnet new bepinex5plugin -n &lt;plugin name&gt; -T netstandard2.0 -U 2019.4.16\n</code></pre></p> <p>When done, you should have a folder with the name of your mod where you ran the command. Open it, there should be 3 files <code>NuGet.Config</code>,<code>Plugin.cs</code> and <code>&lt;plugin name&gt;.csproj</code>. Open the <code>.csproj</code> file with Visual Studio, or your prefered IDE.</p> <p>Warning</p> <p>If you are using Visual Studio Code, doing so will open the file, not the project. Open the directory with VSCode instead.</p> <p>Once Visual Studio loads, open <code>Plugin.cs</code> in the Solution Explorer. This will be the core of your mod, and it should look like this: Default BepInEx Plugin<pre><code>using BepInEx; //(1)!\nnamespace Plugin\n{\n[BepInPlugin(PluginInfo.PLUGIN_GUID, PluginInfo.PLUGIN_NAME, PluginInfo.PLUGIN_VERSION)] //(2)!\npublic class Plugin : BaseUnityPlugin //(4)!\n{\nprivate void Awake() //(3)!\n{\n// Plugin startup logic\nLogger.LogInfo($\"Plugin {PluginInfo.PLUGIN_GUID} is loaded!\");\n}\n}\n}\n</code></pre></p> <ol> <li> <p>This line imports the <code>BepInEx</code> namespace, letting us use any code in it - like <code>BepInPlugin</code>, or <code>BaseUnityPlugin</code>.</p> </li> <li> <p>This <code>Attribute</code> tells BepInEx the metadata of your mod.</p> </li> <li> <p>The function <code>Awake()</code> is the first to be called when the mod is loaded.</p> </li> <li> <p>BaseUnityPlugin extends from MonoBehaviour, so you can use functions such as <code>Update()</code>, which is called on every frame.</p> </li> </ol> <p>If it doesn't look like this, you messed something up. Congratulations! V1 is rapidly approaching your house, and assuming you can't slide and dash, he's probably faster than you. Good luck!</p>"},{"location":"getting-started/2-starting/#adding-libraries","title":"Adding Libraries","text":"<p>Considering you're making a mod, you probably want to change stuff. For that, we need to add the game's code first.</p> <p>Begin by opening your ULTRAKILL folder. If you don't know how to do that, open Steam, and do this.</p> <p></p> <p>From there, navigate to <code>ULTRAKILL_Data\\Managed</code>, and you'll see a lot of DLL files. Copy down this path, because you'll need it.</p> <p>Then, back in Visual Studio, right-click on the Dependencies button in the Solution Explorer, and press Add Project References, then Browse.</p> <p></p> <p>Navigate to the path you copied down, then add <code>Assembly-CSharp.dll</code>, as well as every one starting with <code>UnityEngine</code>. This will add all of the code from ULTRAKILL and Unity, letting us use it for the mod.</p> <p>This may take a while to load, so grab a snack.</p>"},{"location":"getting-started/2-starting/#building","title":"Building","text":"<p>Now we've got our basic set-up out the way, we need to make sure that it works.</p> <p>Press <code>Ctrl + B</code> to build, and you should see some output at the bottom of your screen.</p> <p>Warning</p> <p>You might get an error like <code>'PluginInfo' does not contain a definition for 'PLUGIN_GUID'</code>. </p> <p>In this case, replace both instances of <code>PluginInfo.PLUGIN_GUID</code> with your own GUID (we suggest <code>yourname.ultrakill.modname</code>), <code>PluginInfo.PLUGIN_NAME</code> with your mod's name, and <code>PluginInfo.PLUGIN_VERSION</code> with the mod's semver version - start with <code>1.0.0</code>.</p> <p>Among other things, you should see <code>&lt;project name&gt; -&gt; \"C:\\Path\\To\\Your\\Folder\\bin\\Debug\\netstandard2.0\\&lt;plugin name&gt;.dll</code> - this is the folder the mod has been built to.</p> <p></p> <p>Go to said folder, and you'll see a few DLLs.</p> <p></p> <p>Copy the one with your mod's name, and paste it into <code>ULTRAKILL\\BepInEx\\plugins</code>. Afterwards, run the game, and close it again.</p> <p>Then, navigate to <code>ULTRAKILL\\BepInEx\\</code>, and open <code>LogOutput.log</code>. </p> <p></p> <p>With any luck, you should see a line that reads <code>Plugin &lt;plugin name&gt; is loaded!</code>.</p> <p></p> <p>If you do, well done! You have a functional mod.  </p> <p>Now, to ease the developement process, let's enable BepInEx's console. For that, head to <code>&lt;Ultrakill directory&gt;\\BepInEx\\Config</code> and open <code>BepInEx.cfg</code>. Scroll down a bit until you find this  <pre><code>[Logging.Console]\n## Enables showing a console for log output.\n# Setting type: Boolean\n# Default value: false\nEnabled = false\n</code></pre></p> <p>Replace <code>false</code> with <code>true</code> and start the game again. You should now see a console window open when you start the game</p> <p>Note</p> <p>Seems obvious but you won't be able to use it correctly if you have the game in fullscreen. If that's the case, please set the game to windowed, unless you have multiple screens.</p>"}]}